#pragma once
#include "kelmanFilter.h"

class EstBase {
protected:
	Eigen::MatrixXd _H;
	Eigen::MatrixXd _A;
	Eigen::MatrixXd _B;
	Eigen::MatrixXd _R;
	Eigen::MatrixXd _RInit;
	Eigen::MatrixXd _Q;
	Eigen::MatrixXd _QInit;
	Eigen::VectorXd _Qdig;
	Eigen::MatrixXd _Cu;
	Eigen::MatrixXd _P;
public:
	Eigen::VectorXd estimatorOut;
	Eigen::VectorXd estimatorState;
	inline virtual void estimatorRun(const Eigen::MatrixXd& _u,const Eigen::MatrixXd& _y,const Eigen::Vector4i& _contact,const Eigen::Vector4d& _phase) = 0;
};

class QpEst : public EstBase {
private:
	kelmanFilter<18, 3, 28> estimator;
	double _largeVariance = 100;// 大的协方差
	double _trust;// 对于腿部是否触地的置信度
	template<typename T>
	inline T windowFunc(const T x, const T windowRatio, const T xRange = 1.0, const T yRange = 1.0) {
		if ((x < 0) || (x > xRange)) {
			std::cout << "[ERROR][windowFunc] The x=" << x << ", which should between [0, xRange]" << std::endl;
		}
		if ((windowRatio <= 0) || (windowRatio >= 0.5)) {
			std::cout << "[ERROR][windowFunc] The windowRatio=" << windowRatio << ", which should between [0, 0.5]" << std::endl;
		}

		if (x / xRange < windowRatio) {
			return x * yRange / (xRange * windowRatio);
		}
		else if (x / xRange > 1 - windowRatio) {
			return yRange * (xRange - x) / (xRange * windowRatio);
		}
		else {
			return yRange;
		}
	}
public:
	QpEst(double _dt) {
		_H.resize(28, 18);
		_A.resize(18, 18);
		_B.resize(18, 3);
		_R.resize(28, 28);
		_RInit.resize(28, 28);
		_Q.resize(18, 18);
		_QInit.resize(18, 18);
		_Qdig.resize(18);
		_Cu.resize(3, 3);
		_P.resize(18, 18);
		estimatorOut.resize(28);
		estimatorState.resize(18);

		_H.setZero();
		_A.setZero();
		_B.setZero();
		_R.setZero();
		_RInit.setZero();
		_Q.setZero();
		_QInit.setZero();
		_Qdig.setZero();
		_Cu.setZero();
		_P.setZero();
		estimatorOut.setZero();
		estimatorState.setZero();

		// 初始化状态估计器
		// 状态转移矩阵
		_A.block(0, 3, 3, 3) = Eigen::Matrix<double, 3, 3>::Identity();
		// 输入矩阵
		_B.block(3, 0, 3, 3) = Eigen::Matrix<double, 3, 3>::Identity();
		// 输出矩阵
		_H.block(0, 0, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(3, 0, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(6, 0, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(9, 0, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(12, 3, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(15, 3, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(18, 3, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(21, 3, 3, 3) = -Eigen::Matrix<double, 3, 3>::Identity();
		_H.block(0, 6, 12, 12) = Eigen::Matrix<double, 12, 12>::Identity();
		_H(24, 8) = 1;
		_H(25, 11) = 1;
		_H(26, 14) = 1;
		_H(27, 17) = 1;
		// 初始化状态空间方程
		estimator.setFunc(_A, _B, _H, _dt);
		// 测量噪声协方差
		_RInit << 0.008, 0.012, -0.000, -0.009, 0.012, 0.000, 0.009, -0.009, -0.000, -0.009, -0.009, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, -0.001, -0.002, 0.000, -0.000, -0.003, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
			0.012, 0.019, -0.001, -0.014, 0.018, -0.000, 0.014, -0.013, -0.000, -0.014, -0.014, 0.001, -0.001, 0.001, -0.001, 0.000, 0.000, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.001, 0.001, 0.001, -0.001, 0.000, -0.000, 0.000, -0.000, 0.001, 0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
			-0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001, 0.000, 0.000, 0.001, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
			0.012, 0.018, -0.001, -0.013, 0.018, -0.000, 0.013, -0.013, -0.000, -0.013, -0.013, 0.001, -0.001, 0.000, -0.001, 0.000, 0.001, -0.001, -0.003, 0.000, -0.001, -0.004, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
			0.000, -0.000, 0.000, 0.000, -0.000, 0.001, 0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
			0.009, 0.014, -0.000, -0.010, 0.013, 0.000, 0.010, -0.010, -0.000, -0.010, -0.010, 0.000, -0.001, 0.000, -0.001, 0.000, -0.000, -0.001, -0.001, 0.000, -0.000, -0.003, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000,
			-0.009, -0.013, 0.000, 0.010, -0.013, 0.000, -0.010, 0.009, 0.000, 0.010, 0.010, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, 0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.000, -0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000,
			-0.009, -0.014, 0.001, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001, 0.000, 0.000, -0.000, -0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.000, 0.001, 0.000, 0.000, 0.000, 0.000,
			-0.009, -0.014, 0.000, 0.010, -0.013, 0.000, -0.010, 0.010, 0.000, 0.010, 0.010, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, 0.001, 0.002, -0.000, 0.000, 0.003, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000,
			0.000, 0.001, -0.000, -0.000, 0.001, -0.000, 0.000, -0.000, 0.000, -0.000, -0.000, 0.001, 0.000, -0.000, -0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.001, 0.000, 0.001, -0.001, -0.000, -0.001, 0.001, 0.000, 0.001, 0.001, 0.000, 1.708, 0.048, 0.784, 0.062, 0.042, 0.053, 0.077, 0.001, -0.061, 0.046, -0.019, -0.029, 0.000, 0.000, 0.000, 0.000,
			0.000, 0.001, -0.000, 0.000, 0.000, 0.000, 0.000, -0.000, -0.000, 0.000, -0.000, -0.000, 0.048, 5.001, -1.631, -0.036, 0.144, 0.040, 0.036, 0.016, -0.051, -0.067, -0.024, -0.005, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.001, 0.000, 0.000, -0.001, -0.000, -0.001, 0.000, 0.000, 0.000, 0.000, -0.000, 0.784, -1.631, 1.242, 0.057, -0.037, 0.018, 0.034, -0.017, -0.015, 0.058, -0.021, -0.029, 0.000, 0.000, 0.000, 0.000,
			0.000, 0.000, 0.000, 0.001, 0.000, 0.000, 0.000, -0.000, -0.000, -0.000, -0.000, -0.000, 0.062, -0.036, 0.057, 6.228, -0.014, 0.932, 0.059, 0.053, -0.069, 0.148, 0.015, -0.031, 0.000, 0.000, 0.000, 0.000,
			-0.000, 0.000, -0.000, -0.000, 0.001, 0.000, -0.000, 0.000, 0.000, -0.000, 0.000, 0.000, 0.042, 0.144, -0.037, -0.014, 3.011, 0.986, 0.076, 0.030, -0.052, -0.027, 0.057, 0.051, 0.000, 0.000, 0.000, 0.000,
			-0.001, -0.001, -0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, 0.053, 0.040, 0.018, 0.932, 0.986, 0.885, 0.090, 0.044, -0.055, 0.057, 0.051, -0.003, 0.000, 0.000, 0.000, 0.000,
			-0.002, -0.003, 0.000, 0.002, -0.003, -0.000, -0.001, 0.002, 0.000, 0.002, 0.002, -0.000, 0.077, 0.036, 0.034, 0.059, 0.076, 0.090, 6.230, 0.139, 0.763, 0.013, -0.019, -0.024, 0.000, 0.000, 0.000, 0.000,
			0.000, 0.000, -0.000, -0.000, 0.000, -0.000, 0.000, 0.000, -0.000, -0.000, -0.000, 0.000, 0.001, 0.016, -0.017, 0.053, 0.030, 0.044, 0.139, 3.130, -1.128, -0.010, 0.131, 0.018, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.001, -0.000, 0.000, -0.001, -0.000, -0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.061, -0.051, -0.015, -0.069, -0.052, -0.055, 0.763, -1.128, 0.866, -0.022, -0.053, 0.007, 0.000, 0.000, 0.000, 0.000,
			-0.003, -0.004, -0.000, 0.003, -0.004, -0.000, -0.003, 0.003, 0.000, 0.003, 0.003, 0.000, 0.046, -0.067, 0.058, 0.148, -0.027, 0.057, 0.013, -0.010, -0.022, 2.437, -0.102, 0.938, 0.000, 0.000, 0.000, 0.000,
			-0.000, -0.000, 0.000, 0.000, -0.000, 0.000, -0.000, 0.000, -0.000, 0.000, 0.001, 0.000, -0.019, -0.024, -0.021, 0.015, 0.057, 0.051, -0.019, 0.131, -0.053, -0.102, 4.944, 1.724, 0.000, 0.000, 0.000, 0.000,
			-0.001, -0.001, 0.000, 0.001, -0.001, 0.000, -0.001, 0.001, -0.000, 0.001, 0.001, 0.000, -0.029, -0.005, -0.029, -0.031, 0.051, -0.003, -0.024, 0.018, 0.007, 0.938, 1.724, 1.569, 0.000, 0.000, 0.000, 0.000,
			0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000, 0.000,
			0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000, 0.000,
			0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0, 0.000,
			0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 1.0;
		// 过程噪声协方差
		for (int i(0); i < _Qdig.rows(); ++i)
		{
			if (i < 3)
			{
				_Qdig(i) = 0.0003;
			}
			else if (i < 6)
			{
				_Qdig(i) = 0.0003;
			}
			else
			{
				_Qdig(i) = 0.01;
			}
		}

		_Cu << 268.573, -43.819, -147.211,
			-43.819, 92.949, 58.082,
			-147.211, 58.082, 302.120;
		// 过程协方差
		_QInit = _Qdig.asDiagonal();
		_QInit += _B * _Cu * _B.transpose();

		estimator.setConv(_QInit, _RInit, _largeVariance * _P);// 初始化一个比较大的预测协方差矩阵
	}

	inline void estimatorRun(const Eigen::MatrixXd& _u,const Eigen::MatrixXd& _y, const Eigen::Vector4i& _contact, const Eigen::Vector4d& _phase) {
		_R = _RInit;
		_Q = _QInit;
		for (int i = 0; i < 4; i++)
		{
			if (_contact(i) == 0)
			{
				_Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = _largeVariance * Eigen::Matrix<double, 3, 3>::Identity();
				_R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = _largeVariance * Eigen::Matrix<double, 3, 3>::Identity();
				_R(24 + i, 24 + i) = _largeVariance;
			}
			else
			{
				_trust = windowFunc(_phase(i), 0.2);
				_Q.block(6 + 3 * i, 6 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _QInit.block(6 + 3 * i, 6 + 3 * i, 3, 3);
				_R.block(12 + 3 * i, 12 + 3 * i, 3, 3) = (1 + (1 - _trust) * _largeVariance) * _RInit.block(12 + 3 * i, 12 + 3 * i, 3, 3);
				_R(24 + i, 24 + i) = (1 + (1 - _trust) * _largeVariance) * _RInit(24 + i, 24 + i);
			}
		}
		// 更新协方差矩阵
		estimator.updateConv(_Q, _R);
		// 卡尔曼滤波执行
		estimator.f(_u, _y);
		// 估计输出
		estimatorOut = estimator.getOut();
		// 估计状态
		estimatorState = estimator.getState();
	}
};

class QpwEst : public EstBase {
private:

public:

};